body div + p + p{
    color: red;
}

/* p ~ p {
    color: red;
    este operador selecciona los elementos que preceden
} */

div ~ p{
    font-size: 30px;
}

span > p{
    color: aquamarine;
}

img{
    width: 150px;
    aspect-ratio: 1;
}

img[title = "red"]{
    border: 5px solid yellow;
}

#firstname{
    background-color: blanchedalmond !important;
}

/* hsla => hue, saturation&, lightness%, alpha ex: (0,100%,50%, 0.8)*/

/* hue (tono en español). Este valor representa el ángulo en un círculo cromático, donde los colores están distribuidos alrededor de un círculo de 360 grados. Cada ángulo corresponde a un color específico.

Aquí está el desglose de algunos valores del hue y sus colores correspondientes:

0°: Rojo
60°: Amarillo
120°: Verde
180°: Cian (aqua)
240°: Azul
300°: Magenta (rosa púrpura)
360°: Rojo (mismo que 0°) */

/*  

1. Unidad em:
Relativa al elemento padre: La unidad em se basa en el tamaño de la fuente del elemento padre (es decir, el elemento contenedor inmediato).
Multiplicativa: Los valores en em son multiplicativos, lo que significa que si un elemento tiene un tamaño de fuente de 2em, será dos veces el tamaño de la fuente de su elemento padre.
Herencia: Si varios niveles de anidación usan em, los tamaños pueden escalar rápidamente porque cada nivel toma como referencia el tamaño calculado del nivel anterior.
Ejemplo de em:
css
Copiar código
/* Supongamos que el tamaño de fuente del body es 16px */
/* body {
    font-size: 16px;
}

.container {
    font-size: 1.5em; /* 1.5 * 16px = 24px */
/* }

.container p {
    font-size: 2em; /* 2 * 24px = 48px */
/* } */
/*
En este caso, el tamaño de fuente del párrafo (p) dentro de .container será 48px porque toma como referencia el tamaño de fuente calculado del contenedor, que es 24px.

/* 2. Unidad rem:
Relativa a la raíz (<html>): La unidad rem (root em) se basa siempre en el tamaño de la fuente del elemento raíz (<html>), sin importar en qué parte del árbol DOM se encuentre el elemento.
Constante en el árbol: A diferencia de em, rem no se ve afectado por la jerarquía de elementos y siempre hace referencia al tamaño de fuente de html.
Ejemplo de rem:
css
Copiar código */
/* Supongamos que el tamaño de fuente del html es 16px
html { */
    /* font-size: 16px; */

/* 
.container {
    font-size: 1.5rem; /* 1.5 * 16px = 24px */

/* .container p {
    font-size: 2rem; /* 2 * 16px = 32px */


/* En este caso, el tamaño de fuente del párrafo (p) dentro de .container será 32px porque rem siempre hace referencia al tamaño de fuente del html, que es 16px.

Resumen de las diferencias: */

/* Relativo al tamaño de fuente del elemento padre.
Los tamaños pueden escalar según la jerarquía.
rem:
Relativo al tamaño de fuente del elemento raíz (<html>).
Consistente a lo largo de todo el documento, independiente de la jerarquía.
Cuándo usar cada uno:
Usa em si necesitas que el tamaño de un elemento sea relativo al tamaño de fuente de su contenedor inmediato, lo cual puede ser útil para crear componentes escalables.

 */






